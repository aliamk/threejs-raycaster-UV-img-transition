{"id":"js/shader/fragment.glsl","dependencies":[{"name":"C:\\Users\\ALIA\\Documents\\Coding_Tutorials\\Three.js\\threejs-raycaster-UV-image-transition\\package.json","includedInParent":true,"mtime":1617113709768}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nvarying float vNoise;\\nvarying vec2 vUv;\\n// uniform sampler2D onTexture;\\nuniform sampler2D uImage;\\nuniform float time;\\nuniform float hoverState;\\n\\nvoid main()\\t{\\n\\tvec2 newUV = vUv;\\n\\tvec2 p = newUV;\\n\\tfloat x = hoverState;\\n\\n\\tx = smoothstep(.0, 1.0, (x * 2.0 + p. y - 1.0));\\n\\n\\tvec4 imgAsColorOutput = mix(\\n\\t\\ttexture2D(uImage, (p - .5) * (1. - x) + .5),\\n\\t\\ttexture2D(uImage, (p - .5) * x + .5),\\n\\tx);\\n\\n\\tvec4 onLogo = texture2D(uImage, vUv);\\t\\n\\tgl_FragColor = imgAsColorOutput;\\n\\tgl_FragColor.rgb += 0.05 * vec3(vNoise);\\n\\n\\t// gl_FragColor = vec4(1., 0., 0.0, 1.);\\n\\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\t\\n\\n\\t// vec3 color1 = vec3(1., 0., 0.);\\n\\t// vec3 color2 = vec3(1., 1., 1.);\\n\\t// vec3 finalColor = mix(color1, color2, 0.5 * (vNoise + 1.));\\t\\n\\n\\t// vec2 newUV = vUv;\\n\\t// vec4 onLogo = texture2D(uImage, newUV);\\n\\t// newUV = vec2(newUV.x, newUV.y + 0.01 * sin(newUV.x * 10. + time));\\n\\t// vec4 onLogo = texture2D(uImage, vUv);\\n\\t//\\n\\t// gl_FragColor = vec4(finalColor, 1.);\\n\\t// gl_FragColor = vec4(vUv, 0., 1.);\\n\\t// gl_FragColor = vec4(vNoise, 0., 0., 1.);\\n\\t// gl_FragColor = onLogo;\\n\\t// gl_FragColor.rgb += 0.15 * vec3(vNoise);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1244},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nvarying float vNoise;\\nvarying vec2 vUv;\\n// uniform sampler2D onTexture;\\nuniform sampler2D uImage;\\nuniform float time;\\nuniform float hoverState;\\n\\nvoid main()\\t{\\n\\tvec2 newUV = vUv;\\n\\tvec2 p = newUV;\\n\\tfloat x = hoverState;\\n\\n\\tx = smoothstep(.0, 1.0, (x * 2.0 + p. y - 1.0));\\n\\n\\tvec4 imgAsColorOutput = mix(\\n\\t\\ttexture2D(uImage, (p - .5) * (1. - x) + .5),\\n\\t\\ttexture2D(uImage, (p - .5) * x + .5),\\n\\tx);\\n\\n\\tvec4 onLogo = texture2D(uImage, vUv);\\t\\n\\tgl_FragColor = imgAsColorOutput;\\n\\tgl_FragColor.rgb += 0.05 * vec3(vNoise);\\n\\n\\t// gl_FragColor = vec4(1., 0., 0.0, 1.);\\n\\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\t\\n\\n\\t// vec3 color1 = vec3(1., 0., 0.);\\n\\t// vec3 color2 = vec3(1., 1., 1.);\\n\\t// vec3 finalColor = mix(color1, color2, 0.5 * (vNoise + 1.));\\t\\n\\n\\t// vec2 newUV = vUv;\\n\\t// vec4 onLogo = texture2D(uImage, newUV);\\n\\t// newUV = vec2(newUV.x, newUV.y + 0.01 * sin(newUV.x * 10. + time));\\n\\t// vec4 onLogo = texture2D(uImage, vUv);\\n\\t//\\n\\t// gl_FragColor = vec4(finalColor, 1.);\\n\\t// gl_FragColor = vec4(vUv, 0., 1.);\\n\\t// gl_FragColor = vec4(vNoise, 0., 0., 1.);\\n\\t// gl_FragColor = onLogo;\\n\\t// gl_FragColor.rgb += 0.15 * vec3(vNoise);\\n}\";"},"lineCount":null}},"error":null,"hash":"a36a46f95e9c6f2881aea3f45a2aeb03","cacheData":{"env":{}}}